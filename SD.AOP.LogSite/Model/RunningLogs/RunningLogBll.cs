//------------------------------------------------------------------------------
// <Auto-Generated>
//   Powered By S. L. Lee, ContactQQ：121283087
// </Auto-Generated>
//------------------------------------------------------------------------------

using SD.AOP.Core.Models.Entities;
using System;
using System.Collections.Generic;
using System.Runtime.Remoting.Messaging;

namespace SD.AOP.LogSite.Model.RunningLogs
{
    /// <summary>
    /// 程序日志业务逻辑层类
    /// </summary>
    public class RunningLogBll
    {
        #region 00.字段及单例构造器

        /// <summary>
        /// 实例化数据层
        /// </summary>
        private readonly RunningLogDal _currentDal;

        /// <summary>
        /// 将构造方法私有化
        /// </summary>
        private RunningLogBll()
        {
            this._currentDal = RunningLogDal.CreateInstance();
        }

        /// <summary>
        /// 创建对象静态方法
        /// </summary>
        /// <returns>RunningLogBll实例</returns>
        public static RunningLogBll CreateInstance()
        {
            RunningLogBll exceptionLogBll = CallContext.GetData(typeof(RunningLogBll).Name) as RunningLogBll;
            if (exceptionLogBll == null)
            {
                exceptionLogBll = new RunningLogBll();
                CallContext.SetData(typeof(RunningLogBll).Name, exceptionLogBll);
            }
            return exceptionLogBll;
        }

        #endregion

        #region 01.删除（物理删除）
        /// <summary>
        /// 删除一个实体
        /// </summary>
        /// <param name="id">要删除的实体Id</param>
        /// <returns>删除结果</returns>
        public bool PhysicalDelete(Guid id)
        {
            return this._currentDal.PhysicalDelete(id) > 0;
        }
        #endregion

        #region 02.根据日志Id、开始时间、结束时间查询日志记录条数
        /// <summary>
        /// 根据日志Id、开始时间、结束时间查询日志记录条数
        /// </summary>
        /// <param name="logId">日志Id</param>
        /// <param name="startTime">开始时间</param>
        /// <param name="endTime">结束时间</param>
        /// <returns>符合条件的日志记录条数</returns>
        public int GetCount(Guid logId, string startTime, string endTime)
        {
            return this._currentDal.GetCount(logId, startTime, endTime);
        }
        #endregion

        #region 03.根据日志Id、开始时间、结束时间查询日志列表
        /// <summary>
        /// 根据日志Id、开始时间、结束时间查询日志列表
        /// </summary>
        /// <param name="pageIndex">页码</param>
        /// <param name="pageSize">页容量</param>
        /// <param name="pageCount">符合条件的页数</param>
        /// <param name="rowCount">符合条件的记录条数</param>
        /// <param name="logId">日志Id</param>
        /// <param name="startTime">开始时间</param>
        /// <param name="endTime">结束时间</param>
        /// <returns>日志列表</returns>
        public List<RunningLog> GetModelList(int pageIndex, int pageSize, out int pageCount, out int rowCount, Guid logId, string startTime, string endTime)
        {
            //1.计算总记录条数与总页数
            rowCount = this.GetCount(logId, startTime, endTime);
            pageCount = (int)Math.Ceiling((rowCount * 1.0 / pageSize));

            //2.页索引处理
            pageIndex = pageIndex < 1 ? 1 : pageIndex;
            pageIndex = pageIndex >= pageCount ? pageCount : pageIndex;

            //3.计算起始行与终止行
            int start = (pageIndex - 1) * pageSize + 1;
            int end = pageIndex * pageSize;

            //4.调用数据层返回相应实体集合
            return this._currentDal.GetModelList(start, end, logId, startTime, endTime);
        }
        #endregion

        #region 04.查看日志明细
        /// <summary>
        /// 查看日志明细
        /// </summary>
        /// <param name="id">标识Id</param>
        /// <returns>日志明细</returns>
        public RunningLog GetModel(Guid id)
        {
            return this._currentDal.GetModel(id);
        }
        #endregion
    }
}
